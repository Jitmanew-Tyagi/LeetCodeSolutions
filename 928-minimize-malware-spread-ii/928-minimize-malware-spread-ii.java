class Solution {
    public int minMalwareSpread(int[][] grid, int[] init) {
        Arrays.sort(init);
        int n = grid.length, min = (int)1e9, ans = -1;
        ArrayList<Integer>[] graph = getGraph(n, grid);
        for(int i = 0; i < init.length; i ++) {
            Queue<Integer> que = new LinkedList<>();
            boolean[] vis = new boolean[n];
            for(int j = 0; j < init.length; j ++) {
                vis[init[j]] = true;
                if(i != j) {
                    que.add(init[j]);
                }
            }
            int num = howMany(graph, que, vis);
            if(num < min) {
                ans = init[i];
                min = num;
            }
        }
        return ans;
    }
    
    public int howMany(ArrayList<Integer>[] graph, Queue<Integer> que, boolean[] vis) {
        int ans = 0;
        while(!que.isEmpty()) {
            int out = que.remove();
            for(int i : graph[out]) {
                if(!vis[i]) {
                    ans ++;
                    vis[i] = true;
                    que.add(i);
                }
            }
        }
        return ans;
    }
    
    public ArrayList<Integer>[] getGraph(int n, int[][] cons) {
        ArrayList<Integer>[] graph = new ArrayList[n];
        for(int i = 0; i < n; i ++) graph[i] = new ArrayList<Integer>();
        for(int i = 0; i < n; i ++) {
            for(int j = 0; j < n; j ++) {
                if(i != j && cons[i][j] == 1) {
                    graph[i].add(j);
                }
            }
        }
        return graph;
    }
}